// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// -------------------------
// Modello Utente
// -------------------------

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  attempts Attempt[] // tutti i tentativi effettuati dall'utente

  // Indici
  @@index([name]) // per ricerche sugli utenti
}

// -------------------------
// Modello Test (quiz)
// -------------------------

model Test {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  questions   Question[] @relation("TestQuestions") // domande appartenenti al test
  attempts    Attempt[]  @relation("TestAttempts") // tentativi associati a questo test
}

// -------------------------
// Modello Domanda
// -------------------------

model Question {
  id       String         @id @default(auto()) @map("_id") @db.ObjectId
  text     String
  position Int
  // relazione con Test (1 test -> N domande)
  test     Test           @relation(name: "TestQuestions", fields: [testId], references: [id])
  testId   String         @db.ObjectId
  options  AnswerOption[]

  // Indici
  @@index([testId]) // per join con Test e filtri per test
  @@index([testId, position]) // per orderBy: { position: 'asc' } efficiente
}

// -------------------------
// Modello Opzioni di risposta
// -------------------------

model AnswerOption {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  isCorrect  Boolean
  question   Question @relation(fields: [questionId], references: [id])
  questionId String   @db.ObjectId

  // Indici
  @@index([questionId]) // per join con Question
}

// -------------------------
// Modello Tentativo 
// -------------------------

model Attempt {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  startedAt    DateTime  @default(now())
  finishedAt   DateTime?
  totalCorrect Int       @default(0)
  isCompleted  Boolean   @default(false)

  // relazione con Utente
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  // relazione con Test (1 test -> N tentativi)
  test   Test   @relation(name: "TestAttempts", fields: [testId], references: [id])
  testId String @db.ObjectId

  answers AttemptAnswer[]

  // Indici
  @@index([userId]) // per findMany({ where: { userId, ... } })
  @@index([testId]) // per findMany({ where: { testId, ... } })
  @@index([userId, testId]) // per findMany({ where: { userId, testId, ... } })
  @@index([userId, testId, isCompleted]) // per findMany({ where: { userId, testId, isCompleted: false } })
  @@index([isCompleted]) // per filtri su completamento
}

// -------------------------
// Modello Risposte singole
// -------------------------

model AttemptAnswer {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  questionId     String    @db.ObjectId
  chosenOptionId String    @db.ObjectId
  isCorrect      Boolean
  answeredAt     DateTime  @default(now())
  updatedAt      DateTime?

  // relazione con Tentativo (Attempt)
  attempt   Attempt @relation(fields: [attemptId], references: [id])
  attemptId String  @db.ObjectId

  // Indici
  @@index([attemptId]) // per count({ where: { attemptId, isCorrect: true } })
  @@index([attemptId, questionId]) // per updateMany({ where: { attemptId, questionId } })
  @@index([attemptId, isCorrect]) // per count con filtro isCorrect
  @@index([questionId]) // per join con Question
  @@index([chosenOptionId]) // per join con AnswerOption
}
